#import "../lib.typ": *
#import "@preview/callisto:0.2.2"

#show: doc.with(hw-id: 2)

= 实验要求
在这次的实验中，我们需要对给定的房价的数据集进行如下操作：
+ 检测缺失值，并进行填充
+ 检测异常值
+ 对特征间的相关性进行分析
+ 标准化 `price` 属性
+ 根据 `price` 属性进行离散化
+ 找出和 `price` 属性相关性较高的属性并给出理由

= 具体实现

#let (render, result) = callisto.config(nb: json("hw2.ipynb"))
== 准备工作
首先导入一些我们需要使用的库，并读入数据
#render(0)

== 缺失值的检测与处理
首先，我们需要检测数据中的缺失值。
#render(1)
接着，对于缺失值的处理，我们使用 KNNImputer 进行填充。这样做的好处是能够利用数据中的其他信息来估计缺失值，从而提高数据的完整性和准确性。
#render(2)

== 异常值检测与处理
接下来，我们以 `price` 属性为例，使用 IQR 方法检测异常值。IQR 方法通过计算四分位数来识别异常值，能够有效地捕捉到数据中的极端值。
#render(3)
而对于这些异常值，我们选择将超出上下界限的值替换为边界值，这样可以避免异常值对后续分析产生过大的影响。
#render(4)

== 特征间的相关性分析
我们使用相关性矩阵和热力图来分析特征之间的线性关系。
#render(5)
通过热力图，我们可以直观地看到各个特征之间的相关性强弱.

- 热力图中的颜色越接近 1（深红）或 -1（深蓝），表示两个特征的线性相关性越强。
- 接近 0 的值表示线性相关性很弱。
- 这有助于识别冗余特征（例如两个特征相关性 > 0.9）

== 对 `price` 属性进行标准化
标准化就是将数据按比例缩放，使其分布均值为0，方差为1。在这里，我们使用 `StandardScaler` 来对 `price` 属性进行标准化。
#render(6)

== 对 `price` 属性进行离散化
离散化或分箱是将连续变量转换为分类变量的过程。在这里，我们使用等频分箱的方法将 `price` 属性分为 4 个类别。
#render(7)

== 找出和 `price` 属性相关性较高的特征
对于相关性最高的特征，我们可以直接从之前计算的相关性矩阵中获取这个信息。
#render(8)
对于这 3 个特征，我们可以给出以下理由：
- `OverallQual`（整体质量）：这个特征直接反映了房屋的建筑质量和材料使用情况，通常质量越高的房屋价格也越高，因此与价格有较强的正相关关系。
- `GrLivArea`（地上居住面积）：这个特征表示房屋的实际居住面积，面积越大的房屋通常价格也越高，因此与价格有较强的正相关关系。
- `GarageCars`（车库容量）：这个特征表示车库可以容纳的车辆数量，车库容量较大的房屋通常价格也较高，因此与价格有较强的正相关关系。

#remark[
  完整代码见 `./hw2.ipynb` 文件。
]
